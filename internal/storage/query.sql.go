// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package storage

import (
	"context"
	"database/sql"
	"time"
)

const deleteNotifier = `-- name: DeleteNotifier :exec
DELETE FROM notifiers WHERE user_id=$1 AND system_id=$2 AND notifier_id=$3
`

type DeleteNotifierParams struct {
	UserID     string
	SystemID   int64
	NotifierID int32
}

func (q *Queries) DeleteNotifier(ctx context.Context, arg DeleteNotifierParams) error {
	_, err := q.db.ExecContext(ctx, deleteNotifier, arg.UserID, arg.SystemID, arg.NotifierID)
	return err
}

const insertEcobeeAccount = `-- name: InsertEcobeeAccount :exec
INSERT INTO ecobee_accounts(user_id, enphase_system_id, access_token, refresh_token, created_time, last_refresh_time)
    VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertEcobeeAccountParams struct {
	UserID          string
	EnphaseSystemID int64
	AccessToken     string
	RefreshToken    string
	CreatedTime     time.Time
	LastRefreshTime time.Time
}

func (q *Queries) InsertEcobeeAccount(ctx context.Context, arg InsertEcobeeAccountParams) error {
	_, err := q.db.ExecContext(ctx, insertEcobeeAccount,
		arg.UserID,
		arg.EnphaseSystemID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.CreatedTime,
		arg.LastRefreshTime,
	)
	return err
}

const insertEcobeeThermostat = `-- name: InsertEcobeeThermostat :exec
INSERT INTO ecobee_thermostats(user_id, enphase_system_id, thermostat_id)
    VALUES ($1, $2, $3)
`

type InsertEcobeeThermostatParams struct {
	UserID          string
	EnphaseSystemID int64
	ThermostatID    string
}

func (q *Queries) InsertEcobeeThermostat(ctx context.Context, arg InsertEcobeeThermostatParams) error {
	_, err := q.db.ExecContext(ctx, insertEcobeeThermostat, arg.UserID, arg.EnphaseSystemID, arg.ThermostatID)
	return err
}

const insertEnphaseSystem = `-- name: InsertEnphaseSystem :exec
INSERT INTO enphase_systems(user_id, system_id, name, public_name)
    VALUES($1, $2, $3, $4)
`

type InsertEnphaseSystemParams struct {
	UserID     string
	SystemID   int64
	Name       string
	PublicName string
}

func (q *Queries) InsertEnphaseSystem(ctx context.Context, arg InsertEnphaseSystemParams) error {
	_, err := q.db.ExecContext(ctx, insertEnphaseSystem,
		arg.UserID,
		arg.SystemID,
		arg.Name,
		arg.PublicName,
	)
	return err
}

const insertEnphaseTelemetry = `-- name: InsertEnphaseTelemetry :exec
INSERT INTO enphase_telemetry(user_id, system_id, start_at, end_at, inserted_at, produced_watts, consumed_watts)
    VALUES($1, $2, $3, $4, $5, $6, $7)
`

type InsertEnphaseTelemetryParams struct {
	UserID        string
	SystemID      int64
	StartAt       time.Time
	EndAt         time.Time
	InsertedAt    time.Time
	ProducedWatts int64
	ConsumedWatts int64
}

func (q *Queries) InsertEnphaseTelemetry(ctx context.Context, arg InsertEnphaseTelemetryParams) error {
	_, err := q.db.ExecContext(ctx, insertEnphaseTelemetry,
		arg.UserID,
		arg.SystemID,
		arg.StartAt,
		arg.EndAt,
		arg.InsertedAt,
		arg.ProducedWatts,
		arg.ConsumedWatts,
	)
	return err
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO message_log(notifier_id, timestamp, state_change, success, error_message)
    VALUES($1, $2, $3, $4, $5)
`

type InsertMessageParams struct {
	NotifierID   int32
	Timestamp    time.Time
	StateChange  string
	Success      bool
	ErrorMessage sql.NullString
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertMessage,
		arg.NotifierID,
		arg.Timestamp,
		arg.StateChange,
		arg.Success,
		arg.ErrorMessage,
	)
	return err
}

const insertNotifier = `-- name: InsertNotifier :exec
INSERT INTO notifiers(user_id, system_id, created, notifier_kind, recipient)
    VALUES($1, $2, $3, $4, $5)
`

type InsertNotifierParams struct {
	UserID       string
	SystemID     int64
	Created      time.Time
	NotifierKind string
	Recipient    sql.NullString
}

func (q *Queries) InsertNotifier(ctx context.Context, arg InsertNotifierParams) error {
	_, err := q.db.ExecContext(ctx, insertNotifier,
		arg.UserID,
		arg.SystemID,
		arg.Created,
		arg.NotifierKind,
		arg.Recipient,
	)
	return err
}

const insertSession = `-- name: InsertSession :exec
INSERT INTO auth_sessions(user_id, session_token, access_token, refresh_token, created_time, last_refresh_time)
    VALUES($1, $2, $3, $4, $5, $6)
`

type InsertSessionParams struct {
	UserID          string
	SessionToken    string
	AccessToken     string
	RefreshToken    string
	CreatedTime     time.Time
	LastRefreshTime time.Time
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) error {
	_, err := q.db.ExecContext(ctx, insertSession,
		arg.UserID,
		arg.SessionToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.CreatedTime,
		arg.LastRefreshTime,
	)
	return err
}

const queryEcobeeAccounts = `-- name: QueryEcobeeAccounts :many
SELECT user_id, enphase_system_id, access_token, refresh_token, created_time, last_refresh_time
    FROM ecobee_accounts ORDER BY user_id, enphase_system_id ASC
`

func (q *Queries) QueryEcobeeAccounts(ctx context.Context) ([]EcobeeAccount, error) {
	rows, err := q.db.QueryContext(ctx, queryEcobeeAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EcobeeAccount
	for rows.Next() {
		var i EcobeeAccount
		if err := rows.Scan(
			&i.UserID,
			&i.EnphaseSystemID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.CreatedTime,
			&i.LastRefreshTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryEnphaseSystems = `-- name: QueryEnphaseSystems :many
SELECT system_id, name, public_name FROM enphase_systems WHERE user_id=$1 ORDER BY name ASC
`

type QueryEnphaseSystemsRow struct {
	SystemID   int64
	Name       string
	PublicName string
}

func (q *Queries) QueryEnphaseSystems(ctx context.Context, userID string) ([]QueryEnphaseSystemsRow, error) {
	rows, err := q.db.QueryContext(ctx, queryEnphaseSystems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryEnphaseSystemsRow
	for rows.Next() {
		var i QueryEnphaseSystemsRow
		if err := rows.Scan(&i.SystemID, &i.Name, &i.PublicName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryNotifierForSystem = `-- name: QueryNotifierForSystem :many
SELECT notifier_id, notifier_kind, recipient FROM notifiers
    WHERE user_id=$1 AND system_id=$2
`

type QueryNotifierForSystemParams struct {
	UserID   string
	SystemID int64
}

type QueryNotifierForSystemRow struct {
	NotifierID   int32
	NotifierKind string
	Recipient    sql.NullString
}

func (q *Queries) QueryNotifierForSystem(ctx context.Context, arg QueryNotifierForSystemParams) ([]QueryNotifierForSystemRow, error) {
	rows, err := q.db.QueryContext(ctx, queryNotifierForSystem, arg.UserID, arg.SystemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryNotifierForSystemRow
	for rows.Next() {
		var i QueryNotifierForSystemRow
		if err := rows.Scan(&i.NotifierID, &i.NotifierKind, &i.Recipient); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryNotifiersAll = `-- name: QueryNotifiersAll :many
SELECT notifier_id, notifier_kind, recipient FROM notifiers
`

type QueryNotifiersAllRow struct {
	NotifierID   int32
	NotifierKind string
	Recipient    sql.NullString
}

func (q *Queries) QueryNotifiersAll(ctx context.Context) ([]QueryNotifiersAllRow, error) {
	rows, err := q.db.QueryContext(ctx, queryNotifiersAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryNotifiersAllRow
	for rows.Next() {
		var i QueryNotifiersAllRow
		if err := rows.Scan(&i.NotifierID, &i.NotifierKind, &i.Recipient); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySessions = `-- name: QuerySessions :many

SELECT user_id, session_token, access_token, refresh_token, created_time, last_refresh_time
    FROM auth_sessions WHERE session_token=$1
    GROUP BY user_id HAVING ROWID = MIN(ROWID) ORDER BY created_time DESC
`

// UPDATE auth_sessions SET access_token=$1, refresh_token=$2, last_refresh_time=$3 WHERE user_id=$4;
//     IF @@ROWCOUNT=0
// INSERT INTO auth_sessions(user_id, session_token, access_token, refresh_token, created_time, last_refresh_time)
//     VALUES($1, $2, $3, $4, $5, $6);
func (q *Queries) QuerySessions(ctx context.Context, sessionToken string) ([]AuthSession, error) {
	rows, err := q.db.QueryContext(ctx, querySessions, sessionToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthSession
	for rows.Next() {
		var i AuthSession
		if err := rows.Scan(
			&i.UserID,
			&i.SessionToken,
			&i.AccessToken,
			&i.RefreshToken,
			&i.CreatedTime,
			&i.LastRefreshTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySessionsAll = `-- name: QuerySessionsAll :many
SELECT user_id, session_token, access_token, refresh_token, created_time, last_refresh_time
    FROM auth_sessions
    GROUP BY user_id HAVING ROWID = MIN(ROWID) ORDER BY created_time DESC
`

func (q *Queries) QuerySessionsAll(ctx context.Context) ([]AuthSession, error) {
	rows, err := q.db.QueryContext(ctx, querySessionsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthSession
	for rows.Next() {
		var i AuthSession
		if err := rows.Scan(
			&i.UserID,
			&i.SessionToken,
			&i.AccessToken,
			&i.RefreshToken,
			&i.CreatedTime,
			&i.LastRefreshTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySessionsByUser = `-- name: QuerySessionsByUser :many
SELECT session_token FROM auth_sessions WHERE user_id=$1
`

func (q *Queries) QuerySessionsByUser(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, querySessionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var session_token string
		if err := rows.Scan(&session_token); err != nil {
			return nil, err
		}
		items = append(items, session_token)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEcobeeAccessToken = `-- name: UpdateEcobeeAccessToken :exec
UPDATE ecobee_accounts SET access_token=$1 WHERE user_id=$2 AND enphase_system_id=$3
`

type UpdateEcobeeAccessTokenParams struct {
	AccessToken     string
	UserID          string
	EnphaseSystemID int64
}

func (q *Queries) UpdateEcobeeAccessToken(ctx context.Context, arg UpdateEcobeeAccessTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateEcobeeAccessToken, arg.AccessToken, arg.UserID, arg.EnphaseSystemID)
	return err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE auth_sessions SET access_token=$1, refresh_token=$2, last_refresh_time=$3 WHERE user_id=$4
`

type UpdateSessionParams struct {
	AccessToken     string
	RefreshToken    string
	LastRefreshTime time.Time
	UserID          string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession,
		arg.AccessToken,
		arg.RefreshToken,
		arg.LastRefreshTime,
		arg.UserID,
	)
	return err
}
